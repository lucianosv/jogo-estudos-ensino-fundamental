import { generateWithGemini } from '../utils/geminiClient.ts';
import { validateContent } from '../utils/contentValidator.ts';

interface CompleteGameContent {
  questions: Array<{
    content: string;
    choices: string[];
    answer: string;
    word: string;
  }>;
  narrative: {
    title: string;
    content: string;
  };
}

export const generateCompleteGameContent = async (
  subject: string, 
  theme: string, 
  schoolGrade: string, 
  themeDetails?: string
): Promise<CompleteGameContent> => {
  console.log(`üéØ [UNIFIED-GENERATOR] Gerando conte√∫do completo para ${subject} - ${theme} (${schoolGrade})`);
  
  // Determinar n√≠vel de linguagem baseado na s√©rie
  const languageLevel = schoolGrade <= '3' ? 'simples' : schoolGrade <= '6' ? 'intermedi√°rio' : 'avan√ßado';
  const questionComplexity = schoolGrade <= '3' ? 'b√°sicas' : schoolGrade <= '6' ? 'intermedi√°rias' : 'avan√ßadas';
  
  // PROMPT ESTRUTURADO UNIFICADO - GERA TUDO EM UMA CHAMADA
  const unifiedPrompt = `
INSTRU√á√ïES CR√çTICAS - FORMATO OBRIGAT√ìRIO:
Voc√™ deve retornar EXATAMENTE um JSON v√°lido no formato especificado abaixo.
N√ÉO adicione texto antes ou depois do JSON.
N√ÉO use markdown ou c√≥digo.
APENAS o JSON puro.

TAREFA: Criar conte√∫do educativo completo para ${subject} - ${theme} (${schoolGrade}¬∞ ano)

DADOS DO JOGO:
- Mat√©ria: ${subject}
- Tema: ${theme}
- S√©rie: ${schoolGrade}¬∞ ano
- N√≠vel de linguagem: ${languageLevel}
- Detalhes adicionais: ${themeDetails || 'N√£o especificado'}

FORMATO DE RESPOSTA OBRIGAT√ìRIO:
{
  "questions": [
    {
      "content": "Pergunta educativa clara e objetiva sobre ${theme}",
      "choices": ["Resposta correta", "Alternativa incorreta 1", "Alternativa incorreta 2", "Alternativa incorreta 3"],
      "answer": "Resposta correta",
      "word": "palavra-secreta-relacionada"
    },
    {
      "content": "Segunda pergunta sobre outro aspecto do ${theme}",
      "choices": ["Alternativa incorreta 1", "Resposta correta", "Alternativa incorreta 2", "Alternativa incorreta 3"],
      "answer": "Resposta correta",
      "word": "segunda-palavra-secreta"
    },
    {
      "content": "Terceira pergunta explorando conceito diferente do ${theme}",
      "choices": ["Alternativa incorreta 1", "Alternativa incorreta 2", "Resposta correta", "Alternativa incorreta 3"],
      "answer": "Resposta correta",
      "word": "terceira-palavra-secreta"
    },
    {
      "content": "Quarta pergunta completando o conjunto sobre ${theme}",
      "choices": ["Alternativa incorreta 1", "Alternativa incorreta 2", "Alternativa incorreta 3", "Resposta correta"],
      "answer": "Resposta correta",
      "word": "quarta-palavra-secreta"
    }
  ],
  "narrative": {
    "title": "T√≠tulo envolvente sobre ${theme}",
    "content": "Narrativa educativa de 200-300 palavras conectando todas as palavras secretas coletadas numa hist√≥ria coerente sobre ${theme}. A narrativa deve ser adequada para ${schoolGrade}¬∞ ano, usar linguagem ${languageLevel} e celebrar o aprendizado sobre ${subject}."
  }
}

REQUISITOS OBRIGAT√ìRIOS:

1. PERGUNTAS (exatamente 4):
   - Cada pergunta deve abordar aspecto diferente do ${theme}
   - Perguntas ${questionComplexity} adequadas ao ${schoolGrade}¬∞ ano
   - 4 alternativas cada (1 correta + 3 incorretas plaus√≠veis)
   - Resposta correta deve estar em posi√ß√£o aleat√≥ria nas alternativas
   - Focar em conceitos fundamentais de ${subject}

2. PALAVRAS SECRETAS (exatamente 4):
   - Uma palavra por pergunta, relacionada √† resposta correta
   - Palavras simples, educativas e memor√°veis
   - Sem s√≠mbolos, n√∫meros ou espa√ßos
   - Relacionadas ao tema ${theme}
   - Adequadas ao vocabul√°rio do ${schoolGrade}¬∞ ano

3. NARRATIVA FINAL:
   - 200-300 palavras
   - Conectar organicamente todas as 4 palavras secretas
   - Celebrar aprendizado sobre ${theme}
   - Linguagem adequada ao ${schoolGrade}¬∞ ano
   - Hist√≥ria envolvente e educativa

4. QUALIDADE DO CONTE√öDO:
   - Informa√ß√µes precisas sobre ${subject}
   - Conte√∫do apropriado para crian√ßas
   - Sem viol√™ncia, medo ou temas inadequados
   - Foco na educa√ß√£o e descoberta
   - Linguagem clara e envolvente

EXEMPLOS DE BOA ESTRUTURA:

Para Ci√™ncias - Corpo Humano (3¬∞ ano):
- Pergunta sobre cora√ß√£o ‚Üí palavra: "batimento"
- Pergunta sobre pulm√µes ‚Üí palavra: "respiracao"
- Pergunta sobre c√©rebro ‚Üí palavra: "pensamento"  
- Pergunta sobre ossos ‚Üí palavra: "esqueleto"

Para Hist√≥ria - Descobrimento (4¬∞ ano):
- Pergunta sobre Cabral ‚Üí palavra: "navegador"
- Pergunta sobre caravelas ‚Üí palavra: "embarcacao"
- Pergunta sobre Porto Seguro ‚Üí palavra: "chegada"
- Pergunta sobre 1500 ‚Üí palavra: "descobrimento"

RETORNE APENAS O JSON V√ÅLIDO - NADA MAIS.
`;

  try {
    console.log(`üöÄ [UNIFIED-GENERATOR] Enviando prompt unificado para Gemini...`);
    
    const geminiResponse = await generateWithGemini(unifiedPrompt);
    
    console.log(`üì• [UNIFIED-GENERATOR] Resposta recebida (${geminiResponse.length} chars)`);
    
    // Limpar resposta e tentar parsear JSON
    let cleanResponse = geminiResponse.trim();
    
    // Remover markdown se presente
    if (cleanResponse.startsWith('```json')) {
      cleanResponse = cleanResponse.replace(/^```json\n?/, '').replace(/\n?```$/, '');
    }
    if (cleanResponse.startsWith('```')) {
      cleanResponse = cleanResponse.replace(/^```\n?/, '').replace(/\n?```$/, '');
    }
    
    // Tentar parsear JSON
    let parsedContent: CompleteGameContent;
    try {
      parsedContent = JSON.parse(cleanResponse);
    } catch (parseError) {
      console.error(`‚ùå [UNIFIED-GENERATOR] Erro ao parsear JSON:`, parseError);
      console.log(`üìÑ [UNIFIED-GENERATOR] Resposta recebida:`, cleanResponse.substring(0, 500));
      throw new Error('Invalid JSON response from Gemini');
    }
    
    // Valida√ß√£o rigorosa da estrutura
    if (!parsedContent.questions || !Array.isArray(parsedContent.questions) || 
        parsedContent.questions.length !== 4) {
      throw new Error('Invalid questions structure - must have exactly 4 questions');
    }
    
    if (!parsedContent.narrative || !parsedContent.narrative.title || 
        !parsedContent.narrative.content) {
      throw new Error('Invalid narrative structure');
    }
    
    // Validar cada pergunta
    for (let i = 0; i < parsedContent.questions.length; i++) {
      const q = parsedContent.questions[i];
      if (!q.content || !Array.isArray(q.choices) || q.choices.length !== 4 || 
          !q.answer || !q.word) {
        throw new Error(`Invalid question structure at index ${i}`);
      }
      
      // Verificar se a resposta est√° nas alternativas
      if (!q.choices.includes(q.answer)) {
        throw new Error(`Answer not found in choices for question ${i}`);
      }
      
      // Validar palavra secreta (sem s√≠mbolos especiais)
      if (!/^[a-zA-Z√Ä-√ø]+$/.test(q.word)) {
        throw new Error(`Invalid secret word format at question ${i}: ${q.word}`);
      }
    }
    
    // Validar narrativa
    const narrativeWordCount = parsedContent.narrative.content.split(' ').length;
    if (narrativeWordCount < 150 || narrativeWordCount > 400) {
      console.warn(`‚ö†Ô∏è [UNIFIED-GENERATOR] Narrativa com ${narrativeWordCount} palavras (recomendado: 200-300)`);
    }
    
    // Valida√ß√£o de conte√∫do proibido
    const contentStr = JSON.stringify(parsedContent).toLowerCase();
    if (contentStr.includes('dem√¥nio') || contentStr.includes('morte') || 
        contentStr.includes('viol√™ncia') || contentStr.includes('guerra')) {
      throw new Error('Content contains inappropriate material for children');
    }
    
    console.log(`‚úÖ [UNIFIED-GENERATOR] Conte√∫do completo validado com sucesso:`, {
      questionsCount: parsedContent.questions.length,
      narrativeLength: narrativeWordCount,
      words: parsedContent.questions.map(q => q.word)
    });
    
    return parsedContent;
    
  } catch (error) {
    console.error(`‚ùå [UNIFIED-GENERATOR] Erro na gera√ß√£o unificada:`, error);
    
    // Fallback estruturado espec√≠fico por mat√©ria
    console.log(`üö® [UNIFIED-GENERATOR] Usando fallback estruturado para ${subject}`);
    
    return generateStructuredFallback(subject, theme, schoolGrade);
  }
};

// Fallback estruturado que mant√©m o mesmo formato
const generateStructuredFallback = (
  subject: string, 
  theme: string, 
  schoolGrade: string
): CompleteGameContent => {
  
  const fallbackContent: Record<string, CompleteGameContent> = {
    'Ci√™ncias': {
      questions: [
        {
          content: `Qual √© a principal fun√ß√£o do cora√ß√£o no corpo humano?`,
          choices: ["Digerir alimentos", "Bombear sangue", "Respirar", "Pensar"],
          answer: "Bombear sangue",
          word: "circulacao"
        },
        {
          content: `Quantos pulm√µes n√≥s temos?`,
          choices: ["Um pulm√£o", "Dois pulm√µes", "Tr√™s pulm√µes", "Quatro pulm√µes"],
          answer: "Dois pulm√µes", 
          word: "respiracao"
        },
        {
          content: `Qual √≥rg√£o controla todo o nosso corpo?`,
          choices: ["Est√¥mago", "Cora√ß√£o", "C√©rebro", "F√≠gado"],
          answer: "C√©rebro",
          word: "comando"
        },
        {
          content: `O que protege nossos √≥rg√£os internos?`,
          choices: ["Os ossos", "A pele", "Os m√∫sculos", "O sangue"],
          answer: "Os ossos",
          word: "protecao"
        }
      ],
      narrative: {
        title: "A Aventura do Corpo Humano",
        content: "Numa jornada incr√≠vel pelo corpo humano, voc√™ descobriu como funciona nossa circula√ß√£o! O cora√ß√£o bombeia sangue para todo o corpo sem parar. Depois aprendeu sobre a respira√ß√£o, onde os pulm√µes trabalham junto para nos dar oxig√™nio. No centro de comando, o c√©rebro controla tudo que fazemos, desde pensar at√© mover os bra√ßos. E para nossa prote√ß√£o, os ossos formam um escudo resistente que mant√©m tudo seguro. Que aventura fant√°stica descobrir como nosso corpo √© perfeito e trabalha em equipe para nos manter saud√°veis!"
      }
    },
    'Hist√≥ria': {
      questions: [
        {
          content: `Quem descobriu o Brasil em 1500?`,
          choices: ["Crist√≥v√£o Colombo", "Pedro √Ålvares Cabral", "Vasco da Gama", "Am√©rico Vesp√∫cio"],
          answer: "Pedro √Ålvares Cabral",
          word: "descobridor"
        },
        {
          content: `Em que ano o Brasil foi descoberto?`,
          choices: ["1498", "1499", "1500", "1501"],
          answer: "1500",
          word: "data"
        },
        {
          content: `Onde os portugueses chegaram primeiro no Brasil?`,
          choices: ["Rio de Janeiro", "Salvador", "Porto Seguro", "S√£o Paulo"],
          answer: "Porto Seguro",
          word: "chegada"
        },
        {
          content: `Como se chamavam os navios dos descobridores?`,
          choices: ["Caravelas", "Jangadas", "Canoas", "Lanchas"],
          answer: "Caravelas",
          word: "navegacao"
        }
      ],
      narrative: {
        title: "A Grande Descoberta do Brasil",
        content: "Em uma √©poca de grandes aventuras mar√≠timas, um corajoso descobridor chamado Pedro √Ålvares Cabral navegou pelos oceanos. Na data hist√≥rica de 22 de abril de 1500, sua frota avistou terras brasileiras. A chegada aconteceu na regi√£o que hoje conhecemos como Porto Seguro, na Bahia. Os portugueses viajavam em embarca√ß√µes especiais chamadas caravelas, barcos resistentes para a navega√ß√£o oce√¢nica. Esta descoberta mudou para sempre a hist√≥ria do Brasil e come√ßou uma nova era de encontros entre culturas. Que momento especial para celebrar nossa hist√≥ria!"
      }
    }
  };
  
  return fallbackContent[subject] || fallbackContent['Ci√™ncias'];
};